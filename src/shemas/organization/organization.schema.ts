import { z } from "zod";
import { accountSchema } from "@/src/shemas/account/account.schema";

export const roleSchema = z.object({
  id: z.string(),
  organizationId: z.null(),
  name: z.string(),
  description: z.string(),
  permissions: z.object({
    organization: z.array(z.string()),
    members: z.array(z.string()),
    accounts: z.array(z.string()),
  }),
  isDefault: z.boolean(),
  createdAt: z.string(),
});

export const schema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  description: z.null(),
  ownerId: z.string(),
  logoUrl: z.null(),
  isActive: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  countryId: z.number(),
  subscriptions: z.array(
    z.object({
      id: z.string(),
      organizationId: z.string(),
      subscriptionPlanId: z.string(),
      startDate: z.string(),
      endDate: z.string(),
      status: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
    }),
  ),
  members: z.array(
    z.object({
      id: z.string(),
      organizationId: z.string(),
      userId: z.string(),
      status: z.string(),
      invitationToken: z.null(),
      invitationExpiresAt: z.null(),
      joinedAt: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      roleId: z.string(),
      user: z.object({
        id: z.string(),
        firstName: z.string(),
        lastName: z.string(),
        email: z.string(),
        phoneNumber: z.string(),
        role: z.string(),
        resetCode: z.null(),
        resetCodeExpiresAt: z.null(),
        createdAt: z.string(),
        updatedAt: z.string(),
        emailVerified: z.boolean(),
        emailVerificationToken: z.null(),
        emailVerificationTokenExpiresAt: z.null(),
        avatarUrl: z.null(),
        isLocked: z.boolean(),
        lockedUntil: z.null(),
      }),
      role: roleSchema,
    }),
  ),
  accounts: z.array(accountSchema),
  activeSubscription: z.object({
    id: z.string(),
    organizationId: z.string(),
    subscriptionPlanId: z.string(),
    startDate: z.string(),
    endDate: z.string(),
    status: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    customCommissions: z.array(
      z.object({
        id: z.string(),
        organizationId: z.string(),
        organizationSubscriptionId: z.string(),
        key: z.string(),
        category: z.string(),
        rate: z.string(),
        operatorName: z.string(),
        operatorId: z.number(),
        fixedFee: z.string(),
        countryId: z.number(),
        createdAt: z.string(),
        updatedAt: z.string(),
      }),
    ),
    plan: z.object({
      id: z.string(),
      name: z.string(),
      description: z.string(),
      basePrice: z.string(),
      isActive: z.boolean(),
      createdAt: z.string(),
      updatedAt: z.string(),
      commissions: z.array(
        z.object({
          id: z.string(),
          subscriptionPlanId: z.string(),
          key: z.string(),
          category: z.string(),
          rate: z.string(),
          operatorName: z.string(),
          operatorId: z.number(),
          fixedFee: z.string(),
          countryId: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
        }),
      ),
      features: z.array(
        z.object({
          id: z.string(),
          subscriptionPlanId: z.string(),
          featureId: z.string(),
          isIncluded: z.boolean(),
          maxNumber: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          feature: z.object({
            id: z.string(),
            description: z.string(),
            key: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            pricing: z.array(
              z.object({
                id: z.string(),
                featureId: z.string(),
                countryId: z.number(),
                currency: z.string(),
                price: z.string(),
                createdAt: z.string(),
                updatedAt: z.string(),
              }),
            ),
          }),
        }),
      ),
    }),
  }),
  role: roleSchema,
});

export type OrganizationType = z.infer<typeof schema>;
